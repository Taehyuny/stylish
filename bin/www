#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('shop:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3012');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server); //io 객체 추가:7.29

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//소캣 서버를 생성 및 실행
io.sockets.on('connection', function(socket){
  console.log('1:1상담이 시작되었습니다.');

  let room_name;
  let userName;

  //join event
  socket.on('join', async function(inputToken){
    let findToken = await require('../database/Informations').findOne({token : inputToken});
    let manager = await require('../database/Informations').findOne({id : inputToken});

    if(findToken || manager){
      if(findToken){ userName = findToken.id; }
      if(manager){ userName = manager.id; }
      console.log('success');
      
      room_name = 'consulting';
      socket.join(room_name); 
    }
    else{ io.sockets.emit('error', 'Not Accord Token'); }
  });

  //message event
  socket.on('message', function(data){ 
    io.sockets.in(room_name).emit('message', {userName : userName, data : data}); 
  });

  //disconnect
  socket.on('disconnect', () => { console.log('1:1상담이 종료되었습니다.'); });
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
